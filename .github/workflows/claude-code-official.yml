name: Claude Code with Branch & PR

# イシューコメントでの@claude-codeメンションをトリガー
on:
  issue_comment:
    types: [created]

jobs:
  claude-code-branch-pr:
    runs-on: ubuntu-latest
    
    # @claude-codeメンションがある場合のみ実行
    if: contains(github.event.comment.body, '@claude-code')
    
    permissions:
      contents: write
      issues: write
      pull-requests: write
      actions: read
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract task from comment
        id: extract_task
        run: |
          # コメント本文から@claude-code以降のテキストを抽出（安全な方法）
          # GitHub Actions変数を一時ファイルに保存してから処理
          cat > comment_body.txt << 'COMMENT_EOF'
          ${{ github.event.comment.body }}
          COMMENT_EOF
          
          ISSUE_NUMBER="${{ github.event.issue.number }}"
          
          echo "Raw comment body:"
          cat comment_body.txt
          echo "---"
          
          # @claude-codeメンションの後のテキストを抽出（改良版）
          TASK=$(cat comment_body.txt | grep -oP '@claude-code\s+\K.*' | head -1)
          
          # 代替方法も試す
          if [ -z "$TASK" ]; then
            echo "Trying alternative extraction method..."
            TASK=$(cat comment_body.txt | sed -n 's/.*@claude-code[[:space:]]\+\(.*\)/\1/p' | head -1)
          fi
          
          # さらに代替方法
          if [ -z "$TASK" ]; then
            echo "Trying simple extraction..."
            TASK=$(cat comment_body.txt | sed 's/.*@claude-code[[:space:]]*//' | head -1)
          fi
          
          # 最終的にデフォルトタスクを設定
          if [ -z "$TASK" ] || [ "$TASK" = "@claude-code" ]; then
            echo "No task found, using default"
            TASK="Please help with the request in this issue"
          fi
          
          # タスクを一時ファイルに保存（特殊文字対策）
          echo "$TASK" > task_content.txt
          
          # GitHub Outputに安全に保存
          echo "task<<TASK_EOF" >> $GITHUB_OUTPUT
          cat task_content.txt >> $GITHUB_OUTPUT
          echo "TASK_EOF" >> $GITHUB_OUTPUT
          
          echo "issue_number=$ISSUE_NUMBER" >> $GITHUB_OUTPUT
          
          echo "Extracted task: '$TASK'"
          echo "Task length: ${#TASK}"
          echo "Issue number: $ISSUE_NUMBER"
          
          # 一時ファイルを削除
          rm -f comment_body.txt task_content.txt
      
      - name: Create or switch to feature branch
        id: create_branch
        run: |
          # Issue番号ベースのブランチ名を生成
          BRANCH_NAME="claude-code/issue-${{ steps.extract_task.outputs.issue_number }}"
          
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          
          # リモートブランチが存在するかチェック
          if git ls-remote --heads origin "$BRANCH_NAME" | grep -q "$BRANCH_NAME"; then
            echo "Branch $BRANCH_NAME already exists, switching to it..."
            git fetch origin "$BRANCH_NAME"
            git checkout "$BRANCH_NAME"
            git pull origin "$BRANCH_NAME"
            echo "branch_action=switched" >> $GITHUB_OUTPUT
          else
            echo "Creating new branch: $BRANCH_NAME"
            git checkout -b "$BRANCH_NAME"
            git push -u origin "$BRANCH_NAME"
            echo "branch_action=created" >> $GITHUB_OUTPUT
          fi
          
          echo "Current branch: $BRANCH_NAME"
      
      - name: Execute Claude Code Task
        id: claude_execution
        uses: anthropics/claude-code-base-action@beta
        with:
          prompt: |
            ${{ steps.extract_task.outputs.task }}
            
            Context: This is a request from GitHub Issue #${{ steps.extract_task.outputs.issue_number }} in repository ${{ github.repository }}.
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          allowed_tools: "Bash(git:*),View,GlobTool,GrepTool,BatchTool,Write"
          max_turns: "5"
      
      - name: Check for changes and commit
        id: commit_changes
        run: |
          # Gitの設定
          git config --local user.email "action@github.com"
          git config --local user.name "Claude Code Action"
          
          echo "Checking for changes..."
          git status
          
          # 変更があるかチェック
          if [ -n "$(git status --porcelain)" ]; then
            echo "Changes detected!"
            
            # 変更されたファイル一覧を取得
            CHANGED_FILES=$(git status --porcelain | head -10)
            echo "changed_files<<EOF" >> $GITHUB_OUTPUT
            echo "$CHANGED_FILES" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            
            # Claude Code実行履歴ディレクトリを作成（Issue別）
            CLAUDE_DIR=".claude-code"
            ISSUE_DIR="$CLAUDE_DIR/issues/issue-${{ steps.extract_task.outputs.issue_number }}"
            HISTORY_DIR="$ISSUE_DIR/history"
            mkdir -p "$HISTORY_DIR"
            
            # タイムスタンプ付き履歴ファイル名
            TIMESTAMP=$(date +%Y%m%d-%H%M%S)
            HISTORY_FILE="$HISTORY_DIR/execution-${TIMESTAMP}.md"
            
            # Issue別サマリーファイル
            ISSUE_SUMMARY="$ISSUE_DIR/summary.md"
            
            # 実行履歴を記録（安全なファイル出力）
            CURRENT_DATE=$(date)
            ISSUE_NUM="${{ steps.extract_task.outputs.issue_number }}"
            BRANCH_NAME="${{ steps.create_branch.outputs.branch_name }}"
            REPO_NAME="${{ github.repository }}"
            ACTOR_NAME="${{ github.actor }}"
            WORKFLOW_NAME="${{ github.workflow }}"
            RUN_NUMBER="${{ github.run_number }}"
            COMMIT_SHA="${{ github.sha }}"
            BRANCH_ACTION="${{ steps.create_branch.outputs.branch_action }}"
            
            # タスク内容をファイルから直接取得（安全な方法）
            printf '%s\n' '${{ steps.extract_task.outputs.task }}' > temp_task.txt
            TASK_CONTENT=$(cat temp_task.txt)
            
            # 履歴ファイルを段階的に作成
            echo "# Claude Code Execution History" > "$HISTORY_FILE"
            echo "" >> "$HISTORY_FILE"
            echo "Date: $CURRENT_DATE" >> "$HISTORY_FILE"
            echo "Issue: #$ISSUE_NUM" >> "$HISTORY_FILE"
            echo "Branch: $BRANCH_NAME" >> "$HISTORY_FILE"
            echo "Execution: $TIMESTAMP" >> "$HISTORY_FILE"
            echo "" >> "$HISTORY_FILE"
            echo "## Request Details" >> "$HISTORY_FILE"
            echo '```' >> "$HISTORY_FILE"
            cat temp_task.txt >> "$HISTORY_FILE"
            echo '```' >> "$HISTORY_FILE"
            echo "" >> "$HISTORY_FILE"
            echo "## Changed Files" >> "$HISTORY_FILE"
            echo '```' >> "$HISTORY_FILE"
            echo "$CHANGED_FILES" >> "$HISTORY_FILE"
            echo '```' >> "$HISTORY_FILE"
            echo "" >> "$HISTORY_FILE"
            echo "## Execution Context" >> "$HISTORY_FILE"
            echo "- Repository: $REPO_NAME" >> "$HISTORY_FILE"
            echo "- Triggered by: $ACTOR_NAME" >> "$HISTORY_FILE"
            echo "- Workflow: $WORKFLOW_NAME" >> "$HISTORY_FILE"
            echo "- Run: $RUN_NUMBER" >> "$HISTORY_FILE"
            echo "- Commit: $COMMIT_SHA" >> "$HISTORY_FILE"
            echo "" >> "$HISTORY_FILE"
            echo "## Branch Status" >> "$HISTORY_FILE"
            echo "- Action: $BRANCH_ACTION" >> "$HISTORY_FILE"
            echo "- Branch: $BRANCH_NAME" >> "$HISTORY_FILE"
            
            # 一時ファイルを削除
            rm -f temp_task.txt
            
            # Issue別サマリーファイルを作成/更新
            CHANGED_FILE_COUNT=$(echo "$CHANGED_FILES" | wc -l)
            CURRENT_TIME=$(date '+%Y-%m-%d %H:%M:%S')
            
            if [ ! -f "$ISSUE_SUMMARY" ]; then
              # 新規サマリー作成
              echo "# Issue Summary" > "$ISSUE_SUMMARY"
              echo "" >> "$ISSUE_SUMMARY"
              echo "Created: $CURRENT_DATE" >> "$ISSUE_SUMMARY"
              echo "Branch: $BRANCH_NAME" >> "$ISSUE_SUMMARY"
              echo "Total Executions: 1" >> "$ISSUE_SUMMARY"
              echo "" >> "$ISSUE_SUMMARY"
              echo "## Execution Timeline" >> "$ISSUE_SUMMARY"
              echo "" >> "$ISSUE_SUMMARY"
              echo "### 1. $CURRENT_TIME" >> "$ISSUE_SUMMARY"
              echo "- Files: $CHANGED_FILE_COUNT files changed" >> "$ISSUE_SUMMARY"
              echo "- History: [execution-$TIMESTAMP.md](./history/execution-$TIMESTAMP.md)" >> "$ISSUE_SUMMARY"
            else
              # 既存サマリーを更新
              EXEC_COUNT=$(ls "$HISTORY_DIR"/execution-*.md 2>/dev/null | wc -l)
              
              # 新しい実行を追加
              echo "" >> "$ISSUE_SUMMARY"
              echo "### $EXEC_COUNT. $CURRENT_TIME" >> "$ISSUE_SUMMARY"
              echo "- Files: $CHANGED_FILE_COUNT files changed" >> "$ISSUE_SUMMARY"
              echo "- History: [execution-$TIMESTAMP.md](./history/execution-$TIMESTAMP.md)" >> "$ISSUE_SUMMARY"
            fi
            
            # output.txtがルートにある場合は適切な場所に移動
            if [ -f "output.txt" ]; then
              mv "output.txt" "$ISSUE_DIR/latest-output.txt"
              echo "Moved output.txt to $ISSUE_DIR/latest-output.txt"
            fi
            
            # Issue別READMEを作成/更新
            echo "# Issue README" > "$ISSUE_DIR/README.md"
            echo "" >> "$ISSUE_DIR/README.md"
            echo "Issue Link: [GitHub Issue](${{ github.server_url }}/${{ github.repository }}/issues/$ISSUE_NUM)" >> "$ISSUE_DIR/README.md"
            echo "Branch: [Branch Link](${{ github.server_url }}/${{ github.repository }}/tree/$BRANCH_NAME)" >> "$ISSUE_DIR/README.md"
            echo "" >> "$ISSUE_DIR/README.md"
            echo "## Files in this directory" >> "$ISSUE_DIR/README.md"
            echo "" >> "$ISSUE_DIR/README.md"
            echo "- summary.md - Complete execution timeline and summary" >> "$ISSUE_DIR/README.md"
            echo "- latest-output.txt - Most recent Claude Code output" >> "$ISSUE_DIR/README.md"
            echo "- history/ - Detailed execution history files" >> "$ISSUE_DIR/README.md"
            echo "- README.md - This file" >> "$ISSUE_DIR/README.md"
            echo "" >> "$ISSUE_DIR/README.md"
            echo "Last updated: $CURRENT_DATE" >> "$ISSUE_DIR/README.md"
            
            # メインClaude Code READMEを作成/更新
            echo "# Claude Code Execution Files" > "$CLAUDE_DIR/README.md"
            echo "" >> "$CLAUDE_DIR/README.md"
            echo "This directory contains files generated by Claude Code automation." >> "$CLAUDE_DIR/README.md"
            echo "" >> "$CLAUDE_DIR/README.md"
            echo "## Structure" >> "$CLAUDE_DIR/README.md"
            echo "" >> "$CLAUDE_DIR/README.md"
            echo '```' >> "$CLAUDE_DIR/README.md"
            echo ".claude-code/" >> "$CLAUDE_DIR/README.md"
            echo "├── issues/" >> "$CLAUDE_DIR/README.md"
            echo "│   ├── issue-1/" >> "$CLAUDE_DIR/README.md"
            echo "│   │   ├── summary.md" >> "$CLAUDE_DIR/README.md"
            echo "│   │   ├── latest-output.txt" >> "$CLAUDE_DIR/README.md"
            echo "│   │   ├── history/" >> "$CLAUDE_DIR/README.md"
            echo "│   │   └── README.md" >> "$CLAUDE_DIR/README.md"
            echo "│   └── ..." >> "$CLAUDE_DIR/README.md"
            echo "└── README.md" >> "$CLAUDE_DIR/README.md"
            echo '```' >> "$CLAUDE_DIR/README.md"
            echo "" >> "$CLAUDE_DIR/README.md"
            echo "## Usage" >> "$CLAUDE_DIR/README.md"
            echo "" >> "$CLAUDE_DIR/README.md"
            echo "These files are automatically managed by the Claude Code GitHub Action." >> "$CLAUDE_DIR/README.md"
            echo "Each issue gets its own directory with complete execution history." >> "$CLAUDE_DIR/README.md"
            echo "" >> "$CLAUDE_DIR/README.md"
            echo "Last updated: $CURRENT_DATE" >> "$CLAUDE_DIR/README.md"
            
            # .gitignoreを更新（Issue別対応）
            if [ ! -f ".gitignore" ] || ! grep -q ".claude-code/issues/*/latest-output.txt" ".gitignore"; then
              echo "" >> .gitignore
              echo "# Claude Code temporary files" >> .gitignore
              echo ".claude-code/issues/*/latest-output.txt" >> .gitignore
            fi
            
            # コミット（追加のコミットとして）
            COMMIT_COUNT=$(git rev-list --count HEAD ^origin/main 2>/dev/null || echo "1")
            NEXT_COUNT=$((COMMIT_COUNT + 1))
            
            git add .
            git commit -m "🤖 Claude Code: ${{ steps.extract_task.outputs.task }} (#${NEXT_COUNT})
            
            Automated changes for Issue #${{ steps.extract_task.outputs.issue_number }}
            Commit #${NEXT_COUNT} on this branch
            
            Files organized in .claude-code/ directory
            Execution history preserved in .claude-code/history/
            
            Generated by Claude Code Action
            $(date)"
            
            # プッシュ
            git push origin "${{ steps.create_branch.outputs.branch_name }}"
            
            echo "changes_committed=true" >> $GITHUB_OUTPUT
            echo "history_file=$HISTORY_FILE" >> $GITHUB_OUTPUT
            echo "issue_dir=$ISSUE_DIR" >> $GITHUB_OUTPUT
            echo "Changes committed and pushed to branch ${{ steps.create_branch.outputs.branch_name }}"
          else
            echo "No changes to commit"
            echo "changes_committed=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Create or Update Pull Request
        if: steps.commit_changes.outputs.changes_committed == 'true'
        id: create_pr
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const task = '${{ steps.extract_task.outputs.task }}';
            const issueNumber = '${{ steps.extract_task.outputs.issue_number }}';
            const branchName = '${{ steps.create_branch.outputs.branch_name }}';
            const branchAction = '${{ steps.create_branch.outputs.branch_action }}';
            const changedFiles = `${{ steps.commit_changes.outputs.changed_files }}`;
            
            // 既存のPRがあるかチェック
            const { data: existingPRs } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              head: `${context.repo.owner}:${branchName}`,
              state: 'open'
            });
            
            if (existingPRs.length > 0) {
              // 既存PRの更新
              const pr = existingPRs[0];
              
              // PRコメント作成（安全な文字列結合）
              let updateComment = '## 🔄 Claude Code Update\n\n';
              updateComment += '**Latest Request:** ' + task + '\n';
              updateComment += '**Changes committed at:** ' + new Date().toISOString() + '\n\n';
              updateComment += '### 📋 Latest Changed Files\n';
              updateComment += '```\n';
              updateComment += changedFiles + '\n';
              updateComment += '```\n\n';
              updateComment += '---\n';
              updateComment += '*This PR has been automatically updated with new changes from Claude Code.*';
              
              // PRにコメントを追加
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                body: updateComment
              });
              
              console.log(`✅ Updated existing pull request: #${pr.number}`);
              console.log(`PR URL: ${pr.html_url}`);
              
              return {
                pr_number: pr.number,
                pr_url: pr.html_url,
                pr_action: 'updated'
              };
            } else {
              // 新しいPRの作成
              const prTitle = '🤖 Claude Code: Issue #' + issueNumber;
              
              // PR本文作成（安全な文字列結合）
              let prBody = '## 🤖 Claude Code Automated Changes\n\n';
              prBody += '**Related Issue:** #' + issueNumber + '\n';
              prBody += '**Branch:** `' + branchName + '`\n\n';
              prBody += '### 📝 Task History\n';
              prBody += '- **Latest Request:** ' + task + '\n\n';
              prBody += '### 📋 Changed Files\n';
              prBody += '```\n';
              prBody += changedFiles + '\n';
              prBody += '```\n\n';
              prBody += '### 🔍 Review Guidelines\n';
              prBody += '- [ ] Check that the generated code meets the requirements\n';
              prBody += '- [ ] Verify code quality and best practices\n';
              prBody += '- [ ] Test the functionality if applicable\n';
              prBody += '- [ ] Review for any security considerations\n\n';
              prBody += '### 🤖 Automation Details\n';
              prBody += '- **Triggered by:** @claude-code mention in issue #' + issueNumber + '\n';
              prBody += '- **Branch:** `' + branchName + '`\n';
              prBody += '- **Created at:** ' + new Date().toISOString() + '\n';
              prBody += '- **Workflow:** Claude Code with Branch & PR\n\n';
              prBody += '> **Note:** This PR will be automatically updated if you make additional @claude-code requests in the same issue.\n\n';
              prBody += '---\n';
              prBody += '*This PR was automatically created by Claude Code Action. Please review the changes before merging.*';
              
              const { data: pr } = await github.rest.pulls.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: prTitle,
                head: branchName,
                base: 'main',
                body: prBody,
                draft: false
              });
              
              console.log(`✅ Pull request created: #${pr.number}`);
              console.log(`PR URL: ${pr.html_url}`);
              
              return {
                pr_number: pr.number,
                pr_url: pr.html_url,
                pr_action: 'created'
              };
            }
      
      - name: Create execution summary
        if: always()
        run: |
          echo "## 🤖 Claude Code Branch & PR Summary" > summary.md
          echo "" >> summary.md
          echo "**Task:** ${{ steps.extract_task.outputs.task }}" >> summary.md
          echo "**Issue:** #${{ steps.extract_task.outputs.issue_number }}" >> summary.md
          echo "**Branch:** \`${{ steps.create_branch.outputs.branch_name }}\`" >> summary.md
          echo "**Branch Action:** ${{ steps.create_branch.outputs.branch_action }}" >> summary.md
          echo "**Changes Committed:** ${{ steps.commit_changes.outputs.changes_committed }}" >> summary.md
          echo "" >> summary.md
          
          if [ "${{ steps.claude_execution.outcome }}" = "success" ]; then
            echo "### ✅ Execution Result" >> summary.md
            echo "Claude Code executed successfully!" >> summary.md
            echo "" >> summary.md
            
            if [ "${{ steps.commit_changes.outputs.changes_committed }}" = "true" ]; then
              if [ "${{ steps.create_branch.outputs.branch_action }}" = "created" ]; then
                echo "### 🆕 New Pull Request Created" >> summary.md
                echo "A new pull request has been created for this issue." >> summary.md
              else
                echo "### 🔄 Pull Request Updated" >> summary.md
                echo "The existing pull request for this issue has been updated with new changes." >> summary.md
              fi
              echo "" >> summary.md
              echo "**Next Steps:**" >> summary.md
              echo "1. Review the pull request" >> summary.md
              echo "2. Test the changes if needed" >> summary.md
              echo "3. Add more requests with @claude-code to continue iterating" >> summary.md
              echo "4. Merge when ready" >> summary.md
              echo "" >> summary.md
              echo "**Latest Changed Files:**" >> summary.md
              echo "\`\`\`" >> summary.md
              echo "${{ steps.commit_changes.outputs.changed_files }}" >> summary.md
              echo "\`\`\`" >> summary.md
              echo "" >> summary.md
              echo "**Issue Directory:** [.claude-code/issues/issue-${{ steps.extract_task.outputs.issue_number }}/](.claude-code/issues/issue-${{ steps.extract_task.outputs.issue_number }}/)" >> summary.md
            else
              echo "### ⚠️ No Changes" >> summary.md
              echo "Claude Code executed but no file changes were detected." >> summary.md
              echo "The branch was created but no pull request was necessary." >> summary.md
            fi
          else
            echo "### ❌ Execution Failed" >> summary.md
            echo "Claude Code execution failed. Please check the logs in the Actions tab." >> summary.md
          fi
          
          echo "" >> summary.md
          echo "---" >> summary.md
          echo "*Powered by Claude Code Branch & PR Workflow | $(date)*" >> summary.md
      
      - name: Post result comment
        if: always()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            
            let summary = '';
            if (fs.existsSync('summary.md')) {
              summary = fs.readFileSync('summary.md', 'utf8');
            } else {
              summary = '## 🤖 Claude Code Execution Failed\n\nCould not execute the requested task.';
            }
            
            const issueNumber = parseInt('${{ steps.extract_task.outputs.issue_number }}');
            
            try {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                body: summary
              });
              console.log('✅ Comment posted successfully');
            } catch (error) {
              console.error('❌ Failed to post comment:', error.message);
            }
      
      - name: Upload execution artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: claude-branch-pr-execution-${{ github.run_number }}
          path: |
            summary.md
            ${{ steps.claude_execution.outputs.execution_file }}
          retention-days: 7
      
      - name: Clean up on failure
        if: failure() && steps.create_branch.outputs.branch_name
        run: |
          echo "Cleaning up branch on failure..."
          git push origin --delete "${{ steps.create_branch.outputs.branch_name }}" || true
