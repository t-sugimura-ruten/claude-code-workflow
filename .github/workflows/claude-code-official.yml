name: Claude Code with Branch & PR

# „Ç§„Ç∑„É•„Éº„Ç≥„É°„É≥„Éà„Åß„ÅÆ@claude-code„É°„É≥„Ç∑„Éß„É≥„Çí„Éà„É™„Ç¨„Éº
on:
  issue_comment:
    types: [created]

jobs:
  claude-code-branch-pr:
    runs-on: ubuntu-latest
    
    # @claude-code„É°„É≥„Ç∑„Éß„É≥„Åå„ÅÇ„ÇãÂ†¥Âêà„ÅÆ„ÅøÂÆüË°å
    if: contains(github.event.comment.body, '@claude-code')
    
    permissions:
      contents: write
      issues: write
      pull-requests: write
      actions: read
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract task from comment
        id: extract_task
        run: |
          # „Ç≥„É°„É≥„ÉàÊú¨Êñá„Åã„Çâ@claude-code‰ª•Èôç„ÅÆ„ÉÜ„Ç≠„Çπ„Éà„ÇíÊäΩÂá∫
          COMMENT_BODY="${{ github.event.comment.body }}"
          ISSUE_NUMBER="${{ github.event.issue.number }}"
          
          echo "Raw comment body:"
          echo "$COMMENT_BODY"
          echo "---"
          
          # @claude-code„É°„É≥„Ç∑„Éß„É≥„ÅÆÂæå„ÅÆ„ÉÜ„Ç≠„Çπ„Éà„ÇíÊäΩÂá∫ÔºàÊîπËâØÁâàÔºâ
          TASK=$(echo "$COMMENT_BODY" | grep -oP '@claude-code\s+\K.*' | head -1)
          
          # ‰ª£ÊõøÊñπÊ≥ï„ÇÇË©¶„Åô
          if [ -z "$TASK" ]; then
            echo "Trying alternative extraction method..."
            TASK=$(echo "$COMMENT_BODY" | sed -n 's/.*@claude-code[[:space:]]\+\(.*\)/\1/p' | head -1)
          fi
          
          # „Åï„Çâ„Å´‰ª£ÊõøÊñπÊ≥ï
          if [ -z "$TASK" ]; then
            echo "Trying simple extraction..."
            TASK=$(echo "$COMMENT_BODY" | sed 's/.*@claude-code[[:space:]]*//' | head -1)
          fi
          
          # ÊúÄÁµÇÁöÑ„Å´„Éá„Éï„Ç©„É´„Éà„Çø„Çπ„ÇØ„ÇíË®≠ÂÆö
          if [ -z "$TASK" ] || [ "$TASK" = "@claude-code" ]; then
            echo "No task found, using default"
            TASK="Please help with the request in this issue"
          fi
          
          echo "task=$TASK" >> $GITHUB_OUTPUT
          echo "issue_number=$ISSUE_NUMBER" >> $GITHUB_OUTPUT
          
          echo "Extracted task: '$TASK'"
          echo "Task length: ${#TASK}"
          echo "Issue number: $ISSUE_NUMBER"
      
      - name: Create or switch to feature branch
        id: create_branch
        run: |
          # IssueÁï™Âè∑„Éô„Éº„Çπ„ÅÆ„Éñ„É©„É≥„ÉÅÂêç„ÇíÁîüÊàê
          BRANCH_NAME="claude-code/issue-${{ steps.extract_task.outputs.issue_number }}"
          
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          
          # „É™„É¢„Éº„Éà„Éñ„É©„É≥„ÉÅ„ÅåÂ≠òÂú®„Åô„Çã„Åã„ÉÅ„Çß„ÉÉ„ÇØ
          if git ls-remote --heads origin "$BRANCH_NAME" | grep -q "$BRANCH_NAME"; then
            echo "Branch $BRANCH_NAME already exists, switching to it..."
            git fetch origin "$BRANCH_NAME"
            git checkout "$BRANCH_NAME"
            git pull origin "$BRANCH_NAME"
            echo "branch_action=switched" >> $GITHUB_OUTPUT
          else
            echo "Creating new branch: $BRANCH_NAME"
            git checkout -b "$BRANCH_NAME"
            git push -u origin "$BRANCH_NAME"
            echo "branch_action=created" >> $GITHUB_OUTPUT
          fi
          
          echo "Current branch: $BRANCH_NAME"
      
      - name: Execute Claude Code Task
        id: claude_execution
        uses: anthropics/claude-code-base-action@beta
        with:
          prompt: |
            ${{ steps.extract_task.outputs.task }}
            
            Context: This is a request from GitHub Issue #${{ steps.extract_task.outputs.issue_number }} in repository ${{ github.repository }}.
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          allowed_tools: "Bash(git:*),View,GlobTool,GrepTool,BatchTool,Write"
          max_turns: "5"
      
      - name: Check for changes and commit
        id: commit_changes
        run: |
          # Git„ÅÆË®≠ÂÆö
          git config --local user.email "action@github.com"
          git config --local user.name "Claude Code Action"
          
          echo "Checking for changes..."
          git status
          
          # Â§âÊõ¥„Åå„ÅÇ„Çã„Åã„ÉÅ„Çß„ÉÉ„ÇØ
          if [ -n "$(git status --porcelain)" ]; then
            echo "Changes detected!"
            
            # Â§âÊõ¥„Åï„Çå„Åü„Éï„Ç°„Ç§„É´‰∏ÄË¶ß„ÇíÂèñÂæó
            CHANGED_FILES=$(git status --porcelain | head -10)
            echo "changed_files<<EOF" >> $GITHUB_OUTPUT
            echo "$CHANGED_FILES" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            
            # „Ç≥„Éü„ÉÉ„ÉàÔºàËøΩÂä†„ÅÆ„Ç≥„Éü„ÉÉ„Éà„Å®„Åó„Å¶Ôºâ
            COMMIT_COUNT=$(git rev-list --count HEAD ^origin/main 2>/dev/null || echo "1")
            NEXT_COUNT=$((COMMIT_COUNT + 1))
            
            git add .
            git commit -m "ü§ñ Claude Code: ${{ steps.extract_task.outputs.task }} (#${NEXT_COUNT})
            
            Automated changes for Issue #${{ steps.extract_task.outputs.issue_number }}
            Commit #${NEXT_COUNT} on this branch
            
            Generated by Claude Code Action
            $(date)"
            
            # „Éó„ÉÉ„Ç∑„É•
            git push origin "${{ steps.create_branch.outputs.branch_name }}"
            
            echo "changes_committed=true" >> $GITHUB_OUTPUT
            echo "Changes committed and pushed to branch ${{ steps.create_branch.outputs.branch_name }}"
          else
            echo "No changes to commit"
            echo "changes_committed=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Create or Update Pull Request
        if: steps.commit_changes.outputs.changes_committed == 'true'
        id: create_pr
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const task = '${{ steps.extract_task.outputs.task }}';
            const issueNumber = '${{ steps.extract_task.outputs.issue_number }}';
            const branchName = '${{ steps.create_branch.outputs.branch_name }}';
            const branchAction = '${{ steps.create_branch.outputs.branch_action }}';
            const changedFiles = `${{ steps.commit_changes.outputs.changed_files }}`;
            
            // Êó¢Â≠ò„ÅÆPR„Åå„ÅÇ„Çã„Åã„ÉÅ„Çß„ÉÉ„ÇØ
            const { data: existingPRs } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              head: `${context.repo.owner}:${branchName}`,
              state: 'open'
            });
            
            if (existingPRs.length > 0) {
              // Êó¢Â≠òPR„ÅÆÊõ¥Êñ∞
              const pr = existingPRs[0];
              
              // PR„Ç≥„É°„É≥„Éà‰ΩúÊàêÔºàÂÆâÂÖ®„Å™ÊñáÂ≠óÂàóÁµêÂêàÔºâ
              let updateComment = '## üîÑ Claude Code Update\n\n';
              updateComment += '**Latest Request:** ' + task + '\n';
              updateComment += '**Changes committed at:** ' + new Date().toISOString() + '\n\n';
              updateComment += '### üìã Latest Changed Files\n';
              updateComment += '```\n';
              updateComment += changedFiles + '\n';
              updateComment += '```\n\n';
              updateComment += '---\n';
              updateComment += '*This PR has been automatically updated with new changes from Claude Code.*';
              
              // PR„Å´„Ç≥„É°„É≥„Éà„ÇíËøΩÂä†
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                body: updateComment
              });
              
              console.log(`‚úÖ Updated existing pull request: #${pr.number}`);
              console.log(`PR URL: ${pr.html_url}`);
              
              return {
                pr_number: pr.number,
                pr_url: pr.html_url,
                pr_action: 'updated'
              };
            } else {
              // Êñ∞„Åó„ÅÑPR„ÅÆ‰ΩúÊàê
              const prTitle = 'ü§ñ Claude Code: Issue #' + issueNumber;
              
              // PRÊú¨Êñá‰ΩúÊàêÔºàÂÆâÂÖ®„Å™ÊñáÂ≠óÂàóÁµêÂêàÔºâ
              let prBody = '## ü§ñ Claude Code Automated Changes\n\n';
              prBody += '**Related Issue:** #' + issueNumber + '\n';
              prBody += '**Branch:** `' + branchName + '`\n\n';
              prBody += '### üìù Task History\n';
              prBody += '- **Latest Request:** ' + task + '\n\n';
              prBody += '### üìã Changed Files\n';
              prBody += '```\n';
              prBody += changedFiles + '\n';
              prBody += '```\n\n';
              prBody += '### üîç Review Guidelines\n';
              prBody += '- [ ] Check that the generated code meets the requirements\n';
              prBody += '- [ ] Verify code quality and best practices\n';
              prBody += '- [ ] Test the functionality if applicable\n';
              prBody += '- [ ] Review for any security considerations\n\n';
              prBody += '### ü§ñ Automation Details\n';
              prBody += '- **Triggered by:** @claude-code mention in issue #' + issueNumber + '\n';
              prBody += '- **Branch:** `' + branchName + '`\n';
              prBody += '- **Created at:** ' + new Date().toISOString() + '\n';
              prBody += '- **Workflow:** Claude Code with Branch & PR\n\n';
              prBody += '> **Note:** This PR will be automatically updated if you make additional @claude-code requests in the same issue.\n\n';
              prBody += '---\n';
              prBody += '*This PR was automatically created by Claude Code Action. Please review the changes before merging.*';
              
              const { data: pr } = await github.rest.pulls.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: prTitle,
                head: branchName,
                base: 'main',
                body: prBody,
                draft: false
              });
              
              console.log(`‚úÖ Pull request created: #${pr.number}`);
              console.log(`PR URL: ${pr.html_url}`);
              
              return {
                pr_number: pr.number,
                pr_url: pr.html_url,
                pr_action: 'created'
              };
            }
      
      - name: Create execution summary
        if: always()
        run: |
          echo "## ü§ñ Claude Code Branch & PR Summary" > summary.md
          echo "" >> summary.md
          echo "**Task:** ${{ steps.extract_task.outputs.task }}" >> summary.md
          echo "**Issue:** #${{ steps.extract_task.outputs.issue_number }}" >> summary.md
          echo "**Branch:** \`${{ steps.create_branch.outputs.branch_name }}\`" >> summary.md
          echo "**Branch Action:** ${{ steps.create_branch.outputs.branch_action }}" >> summary.md
          echo "**Changes Committed:** ${{ steps.commit_changes.outputs.changes_committed }}" >> summary.md
          echo "" >> summary.md
          
          if [ "${{ steps.claude_execution.outcome }}" = "success" ]; then
            echo "### ‚úÖ Execution Result" >> summary.md
            echo "Claude Code executed successfully!" >> summary.md
            echo "" >> summary.md
            
            if [ "${{ steps.commit_changes.outputs.changes_committed }}" = "true" ]; then
              if [ "${{ steps.create_branch.outputs.branch_action }}" = "created" ]; then
                echo "### üÜï New Pull Request Created" >> summary.md
                echo "A new pull request has been created for this issue." >> summary.md
              else
                echo "### üîÑ Pull Request Updated" >> summary.md
                echo "The existing pull request for this issue has been updated with new changes." >> summary.md
              fi
              echo "" >> summary.md
              echo "**Next Steps:**" >> summary.md
              echo "1. Review the pull request" >> summary.md
              echo "2. Test the changes if needed" >> summary.md
              echo "3. Add more requests with @claude-code to continue iterating" >> summary.md
              echo "4. Merge when ready" >> summary.md
              echo "" >> summary.md
              echo "**Latest Changed Files:**" >> summary.md
              echo "\`\`\`" >> summary.md
              echo "${{ steps.commit_changes.outputs.changed_files }}" >> summary.md
              echo "\`\`\`" >> summary.md
            else
              echo "### ‚ö†Ô∏è No Changes" >> summary.md
              echo "Claude Code executed but no file changes were detected." >> summary.md
              echo "The branch was created but no pull request was necessary." >> summary.md
            fi
          else
            echo "### ‚ùå Execution Failed" >> summary.md
            echo "Claude Code execution failed. Please check the logs in the Actions tab." >> summary.md
          fi
          
          echo "" >> summary.md
          echo "---" >> summary.md
          echo "*Powered by Claude Code Branch & PR Workflow | $(date)*" >> summary.md
      
      - name: Post result comment
        if: always()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            
            let summary = '';
            if (fs.existsSync('summary.md')) {
              summary = fs.readFileSync('summary.md', 'utf8');
            } else {
              summary = '## ü§ñ Claude Code Execution Failed\n\nCould not execute the requested task.';
            }
            
            const issueNumber = parseInt('${{ steps.extract_task.outputs.issue_number }}');
            
            try {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                body: summary
              });
              console.log('‚úÖ Comment posted successfully');
            } catch (error) {
              console.error('‚ùå Failed to post comment:', error.message);
            }
      
      - name: Upload execution artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: claude-branch-pr-execution-${{ github.run_number }}
          path: |
            summary.md
            ${{ steps.claude_execution.outputs.execution_file }}
          retention-days: 7
      
      - name: Clean up on failure
        if: failure() && steps.create_branch.outputs.branch_name
        run: |
          echo "Cleaning up branch on failure..."
          git push origin --delete "${{ steps.create_branch.outputs.branch_name }}" || true
